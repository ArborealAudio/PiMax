# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  workflow_dispatch:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0

jobs:
  build:
    if: contains(toJson(github.event.commits), '[ci skip]') == false
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-2019, macos-12]

    steps:
    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev  \
          libfreetype6-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev mesa-common-dev xvfb
        sudo /usr/bin/Xvfb $DISPLAY &

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Get Ninja
      uses: seanmiddleditch/gha-setup-ninja@master
      
    - name: Configure
      run: cmake -Bbuild -DPRODUCTION_BUILD=1

    - name: Build
      run: cmake --build build --config Release

    - name: Validate Unix
      if: runner.os != 'Windows'
      run: ./validate.sh
    - name: Validate Windows
      if: runner.os == 'Windows'
      run: bash validate.sh

    # TODO: Write unit tests
    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
